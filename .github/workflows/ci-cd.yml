name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Run service tests
        run: npm run test:service
        
      - name: Run integration tests locally
        run: npm run test:integration
        
      - name: Build service
        run: npm run build:service
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: service-jar
          path: service/target/api-service-1.0-SNAPSHOT.jar
          retention-days: 1

  deploy-to-dev:
    needs: build-and-test
    if: github.event_name == 'push' || github.event.inputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.api_url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: service-jar
          path: service/target/
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Install CDK dependencies
        run: cd infra && npm install
        
      - name: Deploy to Dev
        id: deploy
        run: |
          cd infra
          npx cdk deploy DevApiStack --outputs-file dev-outputs.json --require-approval never
          API_URL=$(cat dev-outputs.json | jq -r '.DevApiStack.ApiUrl')
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          
      - name: Run post-deployment tests
        run: |
          cd integration-tests
          npm install
          API_URL=$(cat ../infra/dev-outputs.json | jq -r '.DevApiStack.ApiUrl') npm test

  deploy-to-staging:
    needs: deploy-to-dev
    if: success() && (github.event_name == 'push' || github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'prod')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.api_url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: service-jar
          path: service/target/
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Install CDK dependencies
        run: cd infra && npm install
        
      - name: Deploy to Staging
        id: deploy
        run: |
          cd infra
          npx cdk deploy StagingApiStack --outputs-file staging-outputs.json --require-approval never
          API_URL=$(cat staging-outputs.json | jq -r '.StagingApiStack.ApiUrl')
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          
      - name: Run post-deployment tests
        id: tests
        continue-on-error: true
        run: |
          cd integration-tests
          npm install
          API_URL=$(cat ../infra/staging-outputs.json | jq -r '.StagingApiStack.ApiUrl') npm test
          echo "test_status=$?" >> $GITHUB_OUTPUT
          
      - name: Rollback if tests fail
        if: steps.tests.outputs.test_status != '0'
        run: |
          echo "Tests failed in staging environment. Rolling back..."
          cd infra
          npx cdk destroy StagingApiStack --force

  deploy-to-prod:
    needs: deploy-to-staging
    if: success() && (github.event.inputs.environment == 'prod')
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: ${{ steps.deploy.outputs.api_url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: service-jar
          path: service/target/
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Install CDK dependencies
        run: cd infra && npm install
        
      - name: Deploy to Production
        id: deploy
        run: |
          cd infra
          npx cdk deploy ProdApiStack --outputs-file prod-outputs.json --require-approval never
          API_URL=$(cat prod-outputs.json | jq -r '.ProdApiStack.ApiUrl')
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          
      - name: Run post-deployment tests
        id: tests
        continue-on-error: true
        run: |
          cd integration-tests
          npm install
          API_URL=$(cat ../infra/prod-outputs.json | jq -r '.ProdApiStack.ApiUrl') npm test
          echo "test_status=$?" >> $GITHUB_OUTPUT
          
      - name: Rollback if tests fail
        if: steps.tests.outputs.test_status != '0'
        run: |
          echo "Tests failed in production environment. Rolling back..."
          cd infra
          npx cdk deploy ProdApiStack --previous-version
