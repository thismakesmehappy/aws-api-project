openapi: 3.0.3
info:
  description: Serverless API project using AWS free tier services
  title: AWS API Project
  version: 0.1.0
servers:
- description: Production server
  url: https://api.example.com/v1
- description: Development server
  url: https://dev-api.example.com/v1
security:
- CognitoAuth: []
paths:
  /items:
    get:
      description: Returns a list of items from the database
      operationId: listItems
      parameters:
      - description: Maximum number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: A list of items
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all items
      tags:
      - items
      x-accepts: application/json
    post:
      description: Adds a new item to the database
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Item created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new item
      tags:
      - items
      x-content-type: application/json
      x-accepts: application/json
  /items/{itemId}:
    delete:
      description: Deletes an item from the database
      operationId: deleteItem
      parameters:
      - description: ID of the item to delete
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Item deleted successfully
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Resource not found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete an item
      tags:
      - items
      x-accepts: application/json
    get:
      description: Returns a single item by its ID
      operationId: getItem
      parameters:
      - description: ID of the item to retrieve
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Item found
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Resource not found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Get item by ID
      tags:
      - items
      x-accepts: application/json
    put:
      description: Updates an existing item in the database
      operationId: updateItem
      parameters:
      - description: ID of the item to update
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Item updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Resource not found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an item
      tags:
      - items
      x-content-type: application/json
      x-accepts: application/json
components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Resource not found
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal server error
  schemas:
    Item:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the item
          type: string
        name:
          description: Name of the item
          type: string
        description:
          description: Description of the item
          type: string
        createdAt:
          description: Creation timestamp
          format: date-time
          type: string
        updatedAt:
          description: Last update timestamp
          format: date-time
          type: string
      required:
      - id
      - name
      type: object
    NewItem:
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the item
          type: string
        description:
          description: Description of the item
          type: string
      required:
      - name
      type: object
    Error:
      properties:
        code:
          description: Error code
          type: string
        message:
          description: Error message
          type: string
      required:
      - code
      - message
      type: object
  securitySchemes:
    CognitoAuth:
      bearerFormat: JWT
      description: Use a valid JWT token from Amazon Cognito
      scheme: bearer
      type: http

